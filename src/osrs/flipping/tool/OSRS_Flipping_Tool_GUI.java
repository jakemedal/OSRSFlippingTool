package osrs.flipping.tool;

import java.awt.Desktop;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;

import javax.swing.JOptionPane;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

public class OSRS_Flipping_Tool_GUI extends javax.swing.JFrame {

	private static final int MAX_GP_AMOUNT = 2147483647;
	private static final int MIN_PROFIT_DEFAULT = 0;

	private final FlipTool flipTool = new FlipTool();
	
    /**
     * Creates new form OSRS_Flipping_Tool_GUI
     */
    public OSRS_Flipping_Tool_GUI() {
        initComponents();
    }

    //this is the table model where we hold the results
    private DefaultTableModel resultsModel = new javax.swing.table.DefaultTableModel(
                                        new Object [][] {

                                        },
                                        new String [] {
                                            "Name", "ID", "Avg Buy Price (GP)", "Avg Sell Price (GP)", "Buy Quantity", "Sell Quantity", "Profit per Item (GP)", "Profit per Item (%)", "Potential Profit", "Members"
                                        }
                                    ){
                                        Class[] types = new Class [] {
                                            String.class, Integer.class, Integer.class, Integer.class, Integer.class, Integer.class, Integer.class, Integer.class, Integer.class, Boolean.class
                                        };
                                        boolean[] canEdit = new boolean [] {
                                            false, false, false, false, false, false, false, false, false
                                        };

                                        public Class getColumnClass(int columnIndex) {
                                            return types [columnIndex];
                                        }

                                        public boolean isCellEditable(int rowIndex, int columnIndex) {
                                            return canEdit [columnIndex];
                                        }
                                    };
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        
        jTable1.addMouseListener(new MouseAdapter() {
        	  public void mouseClicked(MouseEvent e) {
        		  if(e.isShiftDown()) {
        			  int row = jTable1.convertRowIndexToModel(jTable1.getSelectedRow());
        			  int col = jTable1.convertColumnIndexToModel(jTable1.getColumn("ID").getModelIndex());

        			  String itemId = String.valueOf(jTable1.getModel().getValueAt(row, col));
        			  String osBuddyLink = "https://rsbuddy.com/exchange?id=" + itemId;
        	        
        			  URI uri;
        			  try {
        				  uri = new URI(osBuddyLink);
        				  open(uri);
        			  } catch (URISyntaxException e1) {
        				  e1.printStackTrace();
        			  }
					
        		  }
        	  }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("OSRS Flipping Tool");

        jTextField2.setName(""); // NOI18N

        jLabel1.setText("Max Item Price");

        jLabel2.setText("Minimum Profit per Item (%)");
        jLabel2.setToolTipText("");

        jButton1.setText("Search");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Results :");
        jLabel3.setToolTipText("");
        jTable1.setModel(resultsModel);
        
        // Added code to allow sorting of jTable1
        TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(jTable1.getModel());
        jTable1.setRowSorter(sorter);

        List<RowSorter.SortKey> sortKeys = new ArrayList<>(25);
        sortKeys.add(new RowSorter.SortKey(9, SortOrder.ASCENDING));
        sortKeys.add(new RowSorter.SortKey(0, SortOrder.ASCENDING));
        sorter.setSortKeys(sortKeys);
        // --------------------------------------
        
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 991, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)))
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 54, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    //if they press the button
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        List<GEItem> flipList;
        resultsModel.setRowCount(0);
        
    	int maxPrice;
    	int minProfit;
        
        try{
        	String maxPriceString = jTextField1.getText();
        	String minProfitString = jTextField2.getText();
        	
        	maxPrice = convertToInt(maxPriceString);

        	if (minProfitString.equals("")) {
        		minProfit = MIN_PROFIT_DEFAULT;
        		jTextField2.setText("0");
        	} else {
            	minProfit = Integer.parseInt(minProfitString);
        	}

            flipList = flipTool.generateFlipList(maxPrice,minProfit);
            
            for(GEItem item : flipList){
                resultsModel.addRow(new Object[]{
                        item.getName(),
                        item.getId(),
                        item.getBuyAvg(),
                        item.getSellAvg(),
                        item.getBuyQuantity(),
                        item.getSellQuantity(),
                        item.getProfitGP(),
                        item.getProfitPercent(),
                        item.getPotentialProfit(),
                        item.isMembers()
                });
            }
        }catch(NumberFormatException e){
            JOptionPane.showMessageDialog(null, "Invalid input.");

        }catch(Exception e) {
            JOptionPane.showMessageDialog(null,e.toString());
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private int convertToInt(String maxPriceString) {
    	int maxPrice;
    	
    	if (maxPriceString.equals("")) {
    		maxPrice = MAX_GP_AMOUNT;
    		jTextField1.setText(String.valueOf(MAX_GP_AMOUNT));
    	} else if (maxPriceString.endsWith("k") || maxPriceString.endsWith("K")) {
    		maxPrice = Integer.parseInt(maxPriceString.substring(0, maxPriceString.length()-1)) * 1000;
    	} else if (maxPriceString.endsWith("m") || maxPriceString.endsWith("M")) {
    		maxPrice = Integer.parseInt(maxPriceString.substring(0, maxPriceString.length()-1)) * 1000000;
    	} else {
    		maxPrice = Integer.parseInt(maxPriceString);
    	}
		
    	return maxPrice;
	}

	/**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            Logger.getLogger(OSRS_Flipping_Tool_GUI.class.getName()).
                    log(java.util.logging.Level.SEVERE, "Unable to set the Nimbus look and feel. Launching with default look and feel.", ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OSRS_Flipping_Tool_GUI().setVisible(true);
            }
        });
    }
    
    private static void open(URI uri) {
    	if (Desktop.isDesktopSupported()) {
    		try {
    	       Desktop.getDesktop().browse(uri);
    		} catch (IOException e) { /* TODO: error handling */ }
    	} else { /* TODO: error handling */ }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
